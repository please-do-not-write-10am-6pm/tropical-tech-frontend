{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { Platform } from 'expo-modules-core';\nimport { v4 as uuidv4 } from 'uuid';\nexport default {\n  get name() {\n    return 'ExpoDocumentPicker';\n  },\n\n  getDocumentAsync: function getDocumentAsync(_ref) {\n    return function _callee() {\n      var _ref$type, type, _ref$multiple, multiple, input;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _ref$type = _ref.type, type = _ref$type === void 0 ? '*/*' : _ref$type, _ref$multiple = _ref.multiple, multiple = _ref$multiple === void 0 ? false : _ref$multiple;\n\n              if (Platform.isDOMAvailable) {\n                _context.next = 3;\n                break;\n              }\n\n              return _context.abrupt(\"return\", {\n                type: 'cancel'\n              });\n\n            case 3:\n              input = document.createElement('input');\n              input.style.display = 'none';\n              input.setAttribute('type', 'file');\n              input.setAttribute('accept', Array.isArray(type) ? type.join(',') : type);\n              input.setAttribute('id', uuidv4());\n\n              if (multiple) {\n                input.setAttribute('multiple', 'multiple');\n              }\n\n              document.body.appendChild(input);\n              return _context.abrupt(\"return\", new Promise(function (resolve, reject) {\n                input.addEventListener('change', function () {\n                  if (input.files) {\n                    var targetFile = input.files[0];\n                    var mimeType = targetFile.type;\n                    var reader = new FileReader();\n\n                    reader.onerror = function () {\n                      reject(new Error(\"Failed to read the selected media because the operation failed.\"));\n                    };\n\n                    reader.onload = function (_ref2) {\n                      var target = _ref2.target;\n                      var uri = target.result;\n                      resolve({\n                        type: 'success',\n                        uri: uri,\n                        mimeType: mimeType,\n                        name: targetFile.name,\n                        file: targetFile,\n                        lastModified: targetFile.lastModified,\n                        size: targetFile.size,\n                        output: input.files\n                      });\n                    };\n\n                    reader.readAsDataURL(targetFile);\n                  } else {\n                    resolve({\n                      type: 'cancel'\n                    });\n                  }\n\n                  document.body.removeChild(input);\n                });\n                var event = new MouseEvent('click');\n                input.dispatchEvent(event);\n              }));\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  }\n};","map":{"version":3,"mappings":";AAAA,SAASA,QAAT,QAAyB,mBAAzB;AACA,SAASC,EAAE,IAAIC,MAAf,QAA6B,MAA7B;AAIA,eAAe;EACb,IAAIC,IAAJ,GAAQ;IACN,OAAO,oBAAP;EACD,CAHY;;EAKPC,gBALO,kCAQW;IAAA;MAAA;;MAAA;QAAA;UAAA;YAAA;cAAA,iBAFtBC,IAEsB,EAFtBA,IAEsB,0BAFf,KAEe,mCADtBC,QACsB,EADtBA,QACsB,8BADX,KACW;;cAAA,IAEjBN,QAAQ,CAACO,cAFQ;gBAAA;gBAAA;cAAA;;cAAA,iCAGb;gBAAEF,IAAI,EAAE;cAAR,CAHa;;YAAA;cAMhBG,KANgB,GAMRC,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CANQ;cAOtBF,KAAK,CAACG,KAAN,CAAYC,OAAZ,GAAsB,MAAtB;cACAJ,KAAK,CAACK,YAAN,CAAmB,MAAnB,EAA2B,MAA3B;cACAL,KAAK,CAACK,YAAN,CAAmB,QAAnB,EAA6BC,KAAK,CAACC,OAAN,CAAcV,IAAd,IAAsBA,IAAI,CAACW,IAAL,CAAU,GAAV,CAAtB,GAAuCX,IAApE;cACAG,KAAK,CAACK,YAAN,CAAmB,IAAnB,EAAyBX,MAAM,EAA/B;;cACA,IAAII,QAAJ,EAAc;gBACZE,KAAK,CAACK,YAAN,CAAmB,UAAnB,EAA+B,UAA/B;cACD;;cAEDJ,QAAQ,CAACQ,IAAT,CAAcC,WAAd,CAA0BV,KAA1B;cAfsB,iCAiBf,IAAIW,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAoB;gBACrCb,KAAK,CAACc,gBAAN,CAAuB,QAAvB,EAAiC,YAAK;kBACpC,IAAId,KAAK,CAACe,KAAV,EAAiB;oBACf,IAAMC,UAAU,GAAGhB,KAAK,CAACe,KAAN,CAAY,CAAZ,CAAnB;oBACA,IAAME,QAAQ,GAAGD,UAAU,CAACnB,IAA5B;oBACA,IAAMqB,MAAM,GAAG,IAAIC,UAAJ,EAAf;;oBACAD,MAAM,CAACE,OAAP,GAAiB,YAAK;sBACpBP,MAAM,CAAC,IAAIQ,KAAJ,mEAAD,CAAN;oBACD,CAFD;;oBAGAH,MAAM,CAACI,MAAP,GAAgB,iBAAe;sBAAA,IAAZC,MAAY,SAAZA,MAAY;sBAC7B,IAAMC,GAAG,GAAID,MAAc,CAACE,MAA5B;sBACAb,OAAO,CAAC;wBACNf,IAAI,EAAE,SADA;wBAEN2B,GAAG,EAAHA,GAFM;wBAGNP,QAAQ,EAARA,QAHM;wBAINtB,IAAI,EAAEqB,UAAU,CAACrB,IAJX;wBAKN+B,IAAI,EAAEV,UALA;wBAMNW,YAAY,EAAEX,UAAU,CAACW,YANnB;wBAONC,IAAI,EAAEZ,UAAU,CAACY,IAPX;wBAQNC,MAAM,EAAE7B,KAAK,CAACe;sBARR,CAAD,CAAP;oBAUD,CAZD;;oBAcAG,MAAM,CAACY,aAAP,CAAqBd,UAArB;kBACD,CAtBD,MAsBO;oBACLJ,OAAO,CAAC;sBAAEf,IAAI,EAAE;oBAAR,CAAD,CAAP;kBACD;;kBAEDI,QAAQ,CAACQ,IAAT,CAAcsB,WAAd,CAA0B/B,KAA1B;gBACD,CA5BD;gBA8BA,IAAMgC,KAAK,GAAG,IAAIC,UAAJ,CAAe,OAAf,CAAd;gBACAjC,KAAK,CAACkC,aAAN,CAAoBF,KAApB;cACD,CAjCM,CAjBe;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;EAmDvB;AA3DY,CAAf","names":["Platform","v4","uuidv4","name","getDocumentAsync","type","multiple","isDOMAvailable","input","document","createElement","style","display","setAttribute","Array","isArray","join","body","appendChild","Promise","resolve","reject","addEventListener","files","targetFile","mimeType","reader","FileReader","onerror","Error","onload","target","uri","result","file","lastModified","size","output","readAsDataURL","removeChild","event","MouseEvent","dispatchEvent"],"sourceRoot":"","sources":["../src/ExpoDocumentPicker.web.ts"],"sourcesContent":["import { Platform } from 'expo-modules-core';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { DocumentPickerOptions, DocumentResult } from './types';\n\nexport default {\n  get name(): string {\n    return 'ExpoDocumentPicker';\n  },\n\n  async getDocumentAsync({\n    type = '*/*',\n    multiple = false,\n  }: DocumentPickerOptions): Promise<DocumentResult> {\n    // SSR guard\n    if (!Platform.isDOMAvailable) {\n      return { type: 'cancel' };\n    }\n\n    const input = document.createElement('input');\n    input.style.display = 'none';\n    input.setAttribute('type', 'file');\n    input.setAttribute('accept', Array.isArray(type) ? type.join(',') : type);\n    input.setAttribute('id', uuidv4());\n    if (multiple) {\n      input.setAttribute('multiple', 'multiple');\n    }\n\n    document.body.appendChild(input);\n\n    return new Promise((resolve, reject) => {\n      input.addEventListener('change', () => {\n        if (input.files) {\n          const targetFile = input.files[0];\n          const mimeType = targetFile.type;\n          const reader = new FileReader();\n          reader.onerror = () => {\n            reject(new Error(`Failed to read the selected media because the operation failed.`));\n          };\n          reader.onload = ({ target }) => {\n            const uri = (target as any).result;\n            resolve({\n              type: 'success',\n              uri,\n              mimeType,\n              name: targetFile.name,\n              file: targetFile,\n              lastModified: targetFile.lastModified,\n              size: targetFile.size,\n              output: input.files,\n            });\n          };\n          // Read in the image file as a binary string.\n          reader.readAsDataURL(targetFile);\n        } else {\n          resolve({ type: 'cancel' });\n        }\n\n        document.body.removeChild(input);\n      });\n\n      const event = new MouseEvent('click');\n      input.dispatchEvent(event);\n    });\n  },\n};\n"]},"metadata":{},"sourceType":"module"}